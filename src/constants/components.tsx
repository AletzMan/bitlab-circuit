import { BJTNPNIcon, BJTPNPIcon, BoardIcon, CapacitorIcon, DiodeIcon, FerriteCoreInductorIcon, InductorIcon, IronCoreInductorIcon, JFETNIcon, JFETPIcon, LDRIcon, LEDIcon, NChainDepMOSFETIcon, NChainEnhMOSFETIcon, NodeIcon, PChainDepMOSFETIcon, PChainEnhMOSFETIcon, PhotoDiodeIcon, PhotoTransistorNPN3PinsIcon, PhotoTransistorNPNIcon, PhotoTransistorPNP3PinsIcon, PhotoTransistorPNPIcon, PolarisedCapacitorIcon, PotentiometerIcon, PresetFerriteCoreInductorIcon, PresetIronCoreInductorIcon, PushButtonCloseNCIcon, PushButtonCloseNOIcon, PushButtonOpenNCIcon, PushButtonOpenNOIcon, ResistorIcon, RheostatIcon, SchottkyIcon, SwitchDPDTCloseIcon, SwitchDPDTOpenIcon, SwitchDPSTCloseIcon, SwitchDPSTOpenIcon, SwitchSPDTCloseIcon, SwitchSPDTOpenIcon, SwitchSPSTCloseIcon, SwitchSPSTOpenIcon, TVSDiodeIcon, ThermistorIcon, TrimmerCapacitorIcon, TunnelIcon, VaractorIcon, VariableCapacitorIcon, VariableFerriteCoreInductorIcon, VariableIronCoreInductorIcon, ZenerIcon } from "@/icons";
import { Categories, ComponentProperties, ComponentType, UnitsType } from "@/types";



// Mapa para almacenar contadores por tipo
export const ComponentsMap: Record<ComponentType, ComponentProperties> = {
    [ComponentType.Board]: {
        name: 'Board',
        value: 0,
        category: Categories.Structure,
        componentType: ComponentType.Board,
        icon: <BoardIcon />,
        unit: UnitsType.Undefined,
        prefix: "",
        reference: "BR",
        type: 'board',
        has_properties: false,
        isReferenceVisible: false,
        isValueVisible: false,
        connectedHandles: [],
        style: {
            height:
                200, width: 200

        },
        size: "small"
    },
    [ComponentType.Node]: {
        name: 'Node',
        value: 0,
        category: Categories.Structure,
        componentType: ComponentType.Node,
        icon: <NodeIcon />,
        unit: UnitsType.Undefined,
        prefix: "",
        reference: "N",
        type: 'nodeComponent',
        has_properties: false,
        isReferenceVisible: false,
        isValueVisible: false,
        connectedHandles: [false, false, false, false],
        color: 'var(--foreground-color)',
        style: undefined,
        size: "small"
    },
    [ComponentType.Resistor]: {
        name: 'Resistor',
        value: 1,
        category: Categories.Resistors,
        componentType: ComponentType.Resistor,
        icon: <ResistorIcon />,
        unit: UnitsType.Ohm,
        prefix: "KΩ",
        reference: "R",
        type: 'analogComponent',
        has_properties: true,
        isReferenceVisible: true,
        isValueVisible: true,
        connectedHandles: [false, false],
        style: undefined,
        size: "small"
    },
    [ComponentType.Rheostat]: {
        name: 'Rheostat',
        value: 1,
        category: Categories.Resistors,
        componentType: ComponentType.Rheostat,
        icon: <RheostatIcon />,
        unit: UnitsType.Ohm,
        prefix: "KΩ",
        reference: "RH",
        type: 'analogComponent',
        has_properties: true,
        isReferenceVisible: true,
        isValueVisible: true,
        connectedHandles: [false, false],
        style: undefined,
        size: "small"
    },
    [ComponentType.Thermistor]: {
        name: 'Thermistor',
        value: 10,
        category: Categories.Resistors,
        componentType: ComponentType.Thermistor,
        icon: <ThermistorIcon />,
        unit: UnitsType.Ohm,
        prefix: "KΩ",
        reference: "RT",
        type: 'analogComponent',
        has_properties: true,
        isReferenceVisible: true,
        isValueVisible: true,
        connectedHandles: [false, false],
        style: undefined,
        size: "small"
    },
    [ComponentType.Photoresistance]: {
        name: 'Photo Resistance',
        value: 10,
        category: Categories.Resistors,
        componentType: ComponentType.Photoresistance,
        icon: <LDRIcon />,
        unit: UnitsType.Ohm,
        prefix: "KΩ",
        reference: "LDR",
        type: 'analogComponent',
        has_properties: true,
        isReferenceVisible: true,
        isValueVisible: true,
        connectedHandles: [false, false],
        style: undefined,
        size: "medium"
    },
    [ComponentType.Potentiometer]: {
        name: 'Potentiometer',
        value: 1,
        category: Categories.Resistors,
        componentType: ComponentType.Potentiometer,
        icon: <PotentiometerIcon />,
        unit: UnitsType.Ohm,
        prefix: "KΩ",
        reference: "R",
        type: 'analogComponent',
        has_properties: true,
        isReferenceVisible: true,
        isValueVisible: true,
        connectedHandles: [false, false],
        style: undefined,
        size: "small"
    },
    [ComponentType.Capacitor]: {
        name: 'Capacitor',
        value: 100,
        category: Categories.Capacitors,
        componentType: ComponentType.Capacitor,
        icon: <CapacitorIcon />,
        unit: UnitsType.Capacitance,
        prefix: "nF",
        reference: "C",
        type: 'analogComponent',
        has_properties: true,
        isReferenceVisible: true,
        isValueVisible: true,
        connectedHandles: [false, false],
        style: undefined,
        size: "small"
    },
    [ComponentType.PolarisedCapacitor]: {
        name: 'Polarised Capacitor',
        value: 4.7,
        category: Categories.Capacitors,
        componentType: ComponentType.PolarisedCapacitor,
        icon: <PolarisedCapacitorIcon />
        , unit: UnitsType.Capacitance,
        prefix: "µF",
        reference: "C",
        type: 'analogComponent',
        has_properties: true,
        isReferenceVisible: true,
        isValueVisible: true,
        connectedHandles: [false, false],
        style: undefined,
        size: "small"
    },
    [ComponentType.VariableCapacitor]: {
        name: 'Variable Capacitor',
        value: 100,
        category: Categories.Capacitors,
        componentType: ComponentType.VariableCapacitor,
        icon: <VariableCapacitorIcon />,
        unit: UnitsType.Capacitance,
        prefix: "µF",
        reference: "VC",
        type: 'analogComponent',
        has_properties: true,
        isReferenceVisible: true,
        isValueVisible: true,
        connectedHandles: [false, false],
        style: undefined,
        size: "small"
    },
    [ComponentType.TrimmerCapacitor]: {
        name: 'Trimmer Capacitor',
        value: 100,
        category: Categories.Capacitors,
        componentType: ComponentType.TrimmerCapacitor,
        icon: <TrimmerCapacitorIcon />,
        unit: UnitsType.Capacitance,
        prefix: "µF",
        reference: "VC",
        type: 'analogComponent',
        has_properties: true,
        isReferenceVisible: true,
        isValueVisible: true,
        connectedHandles: [false, false],
        style: undefined,
        size: "small"
    },
    [ComponentType.Diode]: {
        name: 'Diode',
        value: 0.7,
        category: Categories.Diodes,
        componentType: ComponentType.Diode,
        icon: <DiodeIcon />,
        unit: UnitsType.Voltage,
        prefix: "V",
        reference: "D",
        type: 'analogComponent',
        has_properties: true,
        isReferenceVisible: true,
        isValueVisible: true,
        connectedHandles: [false, false],
        style: undefined,
        size: "small"
    },
    [ComponentType.Led]: {
        name: 'LED',
        value: 30,
        category: Categories.Diodes,
        componentType: ComponentType.Led,
        icon: <LEDIcon />,
        unit: UnitsType.Current,
        prefix: "µA",
        reference: "LED",
        type: 'analogComponent',
        has_properties: true,
        isReferenceVisible: true,
        isValueVisible: true,
        connectedHandles: [false, false],
        style: undefined,
        size: "small", color: '#FF0000'
    },
    [ComponentType.Zener]: {
        name: 'Zener',
        value: 6,
        category: Categories.Diodes,
        componentType: ComponentType.Zener,
        icon: <ZenerIcon />,
        unit: UnitsType.Current,
        prefix: "V",
        reference: "D",
        type: 'analogComponent',
        has_properties: true,
        isReferenceVisible: true,
        isValueVisible: true,
        connectedHandles: [false, false],
        style: undefined,
        size: "small"
    },
    [ComponentType.Schottky]: {
        name: 'Schottky',
        value: 30,
        category: Categories.Diodes,
        componentType: ComponentType.Schottky,
        icon: <SchottkyIcon />,
        unit: UnitsType.Current,
        prefix: "V",
        reference: "D",
        type: 'analogComponent',
        has_properties: true,
        isReferenceVisible: true,
        isValueVisible: true,
        connectedHandles: [false, false],
        style: undefined,
        size: "small"
    },
    [ComponentType.Tunnel]: {
        name: 'Tunnel',
        value: 15,
        category: Categories.Diodes,
        componentType: ComponentType.Tunnel,
        icon: <TunnelIcon />,
        unit: UnitsType.Current,
        prefix: "V",
        reference: "D",
        type: 'analogComponent',
        has_properties: true,
        isReferenceVisible: true,
        isValueVisible: true,
        connectedHandles: [false, false],
        style: undefined,
        size: "small"
    },
    [ComponentType.PhotoDiode]: {
        name: 'Photo Diode',
        value: 6,
        category: Categories.Diodes,
        componentType: ComponentType.PhotoDiode,
        icon: <PhotoDiodeIcon />,
        unit: UnitsType.Current,
        prefix: "V",
        reference: "D",
        type: 'analogComponent',
        has_properties: true,
        isReferenceVisible: true,
        isValueVisible: true,
        connectedHandles: [false, false],
        style: undefined,
        size: "small"
    },
    [ComponentType.TVSDiode]: {
        name: 'TVS Diode',
        value: 15,
        category: Categories.Diodes,
        componentType: ComponentType.TVSDiode,
        icon: <TVSDiodeIcon />,
        unit: UnitsType.Current,
        prefix: "V",
        reference: "D",
        type: 'analogComponent',
        has_properties: true,
        isReferenceVisible: true,
        isValueVisible: true,
        connectedHandles: [false, false],
        style: undefined,
        size: "small"
    },
    [ComponentType.Varactor]: {
        name: 'Varactor',
        value: 30,
        category: Categories.Diodes,
        componentType: ComponentType.Varactor,
        icon: <VaractorIcon />,
        unit: UnitsType.Current,
        prefix: "V",
        reference: "D",
        type: 'analogComponent',
        has_properties: true,
        isReferenceVisible: true,
        isValueVisible: true,
        connectedHandles: [false, false],
        style: undefined,
        size: "small"
    },
    [ComponentType.TransistorBJT_NPN]: {
        name: 'Transistor BJT NPN',
        value: 1,
        category: Categories.Transistors,
        componentType: ComponentType.TransistorBJT_NPN,
        icon: <BJTNPNIcon />,
        unit: UnitsType.Undefined,
        prefix: "",
        reference: "Q",
        type: 'transistorComponent',
        has_properties: true,
        isReferenceVisible: true,
        isValueVisible: false,
        connectedHandles: [false, false, false],
        style: undefined,
        size: "small"
    },
    [ComponentType.TransistorBJT_PNP]: {
        name: 'Transistor BJT PNP',
        value: 1,
        category: Categories.Transistors,
        componentType: ComponentType.TransistorBJT_PNP,
        icon: <BJTPNPIcon />,
        unit: UnitsType.Undefined,
        prefix: "",
        reference: "Q",
        type: 'transistorComponent',
        has_properties: true,
        isReferenceVisible: true,
        isValueVisible: false,
        connectedHandles: [false, false, false],
        style: undefined,
        size: "small"
    },
    [ComponentType.TransistorJFET_N]: {
        name: 'Transistor JFET N-Chan',
        value: 1,
        category: Categories.Transistors,
        componentType: ComponentType.TransistorJFET_N,
        icon: <JFETNIcon />,
        unit: UnitsType.Undefined,
        prefix: "",
        reference: "Q",
        type: 'transistorComponent',
        has_properties: true,
        isReferenceVisible: true,
        isValueVisible: false,
        connectedHandles: [false, false, false],
        style: undefined,
        size: "small"
    },
    [ComponentType.TransistorJFET_P]: {
        name: 'Transistor JFET P-Chan',
        value: 1,
        category: Categories.Transistors,
        componentType: ComponentType.TransistorJFET_P,
        icon: <JFETPIcon />,
        unit: UnitsType.Undefined,
        prefix: "",
        reference: "Q",
        type: 'transistorComponent',
        has_properties: true,
        isReferenceVisible: true,
        isValueVisible: false,
        connectedHandles: [false, false, false],
        style: undefined,
        size: "small"
    },
    [ComponentType.TransistorMOSFET_N_Enhanced]: {
        name: 'Transistor MOSFET N-Chan Enhanced',
        value: 1,
        category: Categories.Transistors,
        componentType: ComponentType.TransistorMOSFET_N_Enhanced,
        icon: <NChainEnhMOSFETIcon />,
        unit: UnitsType.Undefined,
        prefix: "",
        reference: "Q",
        type: 'transistorComponent',
        has_properties: true,
        isReferenceVisible: true,
        isValueVisible: false,
        connectedHandles: [false, false, false],
        style: undefined,
        size: "small"
    },
    [ComponentType.TransistorMOSFET_P_Enhanced]: {
        name: 'Transistor MOSFET P-Chan Enhanced',
        value: 1,
        category: Categories.Transistors,
        componentType: ComponentType.TransistorMOSFET_P_Enhanced,
        icon: <PChainEnhMOSFETIcon />,
        unit: UnitsType.Undefined,
        prefix: "",
        reference: "Q",
        type: 'transistorComponent',
        has_properties: true,
        isReferenceVisible: true,
        isValueVisible: false,
        connectedHandles: [false, false, false],
        style: undefined,
        size: "small"
    },
    [ComponentType.TransistorMOSFET_N_Depletion]: {
        name: 'Transistor MOSFET N-Chan Depletion',
        value: 1,
        category: Categories.Transistors,
        componentType: ComponentType.TransistorMOSFET_N_Depletion,
        icon: <NChainDepMOSFETIcon />,
        unit: UnitsType.Undefined,
        prefix: "",
        reference: "Q",
        type: 'transistorComponent',
        has_properties: true,
        isReferenceVisible: true,
        isValueVisible: false,
        connectedHandles: [false, false, false],
        style: undefined,
        size: "small"
    },
    [ComponentType.TransistorMOSFET_P_Depletion]: {
        name: 'Transistor MOSFET P-Chan Depletion',
        value: 1,
        category: Categories.Transistors,
        componentType: ComponentType.TransistorMOSFET_P_Depletion,
        icon: <PChainDepMOSFETIcon />,
        unit: UnitsType.Undefined,
        prefix: "",
        reference: "Q",
        type: 'transistorComponent',
        has_properties: true,
        isReferenceVisible: true,
        isValueVisible: false,
        connectedHandles: [false, false, false],
        style: undefined,
        size: "small"
    },
    [ComponentType.PhotoTransistorNPN]: {
        name: 'Photo Transistor NPN',
        value: 100,
        category: Categories.Transistors,
        componentType: ComponentType.PhotoTransistorNPN,
        icon: <PhotoTransistorNPNIcon />,
        unit: UnitsType.Undefined,
        prefix: "",
        reference: "Q",
        type: 'transistorComponent',
        has_properties: true,
        isReferenceVisible: true,
        isValueVisible: false,
        connectedHandles: [false, false],
        style: undefined,
        size: "large"
    },
    [ComponentType.PhotoTransistorPNP]: {
        name: 'Photo Transistor PNP',
        value: 100,
        category: Categories.Transistors,
        componentType: ComponentType.PhotoTransistorPNP,
        icon: <PhotoTransistorPNPIcon />,
        unit: UnitsType.Undefined,
        prefix: "",
        reference: "Q",
        type: 'transistorComponent',
        has_properties: true,
        isReferenceVisible: true,
        isValueVisible: false,
        connectedHandles: [false, false],
        style: undefined,
        size: "large"
    },
    [ComponentType.PhotoTransistorNPN3Pins]: {
        name: 'Photo Transistor NPN 3 Pins',
        value: 100,
        category: Categories.Transistors,
        componentType: ComponentType.PhotoTransistorNPN3Pins,
        icon: <PhotoTransistorNPN3PinsIcon />,
        unit: UnitsType.Undefined,
        prefix: "",
        reference: "Q",
        type: 'transistorComponent',
        has_properties: true,
        isReferenceVisible: true,
        isValueVisible: false,
        connectedHandles: [false, false],
        style: undefined,
        size: "large"
    },
    [ComponentType.PhotoTransistorPNP3Pins]: {
        name: 'Photo Transistor PNP 3 Pins',
        value: 100,
        category: Categories.Transistors,
        componentType: ComponentType.PhotoTransistorPNP3Pins,
        icon: <PhotoTransistorPNP3PinsIcon />,
        unit: UnitsType.Undefined,
        prefix: "",
        reference: "Q",
        type: 'transistorComponent',
        has_properties: true,
        isReferenceVisible: true,
        isValueVisible: false,
        connectedHandles: [false, false],
        style: undefined,
        size: "large"
    },
    [ComponentType.Inductor]: {
        name: 'Inductor',
        value: 100,
        category: Categories.Inductors,
        componentType: ComponentType.Inductor,
        icon: <InductorIcon />,
        unit: UnitsType.Inductance,
        prefix: "mH",
        reference: "L",
        type: 'analogComponent',
        has_properties: true,
        isReferenceVisible: true,
        isValueVisible: true,
        connectedHandles: [false, false],
        style: undefined,
        size: "small"
    },
    [ComponentType.FerriteCoreInductor]: {
        name: 'Ferrite Core Inductor',
        value: 100,
        category: Categories.Inductors,
        componentType: ComponentType.FerriteCoreInductor,
        icon: <FerriteCoreInductorIcon />,
        unit: UnitsType.Inductance,
        prefix: "mH",
        reference: "L",
        type: 'analogComponent',
        has_properties: true,
        isReferenceVisible: true,
        isValueVisible: true,
        connectedHandles: [false, false],
        style: undefined,
        size: "small"
    },
    [ComponentType.IronCoreInductor]: {
        name: 'Iron Core Inductor',
        value: 100,
        category: Categories.Inductors,
        componentType: ComponentType.IronCoreInductor,
        icon: <IronCoreInductorIcon />,
        unit: UnitsType.Inductance,
        prefix: "mH",
        reference: "L",
        type: 'analogComponent',
        has_properties: true,
        isReferenceVisible: true,
        isValueVisible: true,
        connectedHandles: [false, false],
        style: undefined,
        size: "small"
    },
    [ComponentType.PresetFerriteCoreInductor]: {
        name: 'Preset Ferrite Core Inductor',
        value: 100,
        category: Categories.Inductors,
        componentType: ComponentType.PresetFerriteCoreInductor,
        icon: <PresetFerriteCoreInductorIcon />,
        unit: UnitsType.Inductance,
        prefix: "mH",
        reference: "L",
        type: 'analogComponent',
        has_properties: true,
        isReferenceVisible: true,
        isValueVisible: true,
        connectedHandles: [false, false],
        style: undefined,
        size: "small"
    },
    [ComponentType.PresetIronCoreInductor]: {
        name: 'Preset Iron Core Inductor',
        value: 100,
        category: Categories.Inductors,
        componentType: ComponentType.PresetIronCoreInductor,
        icon: <PresetIronCoreInductorIcon />,
        unit: UnitsType.Inductance,
        prefix: "mH",
        reference: "L",
        type: 'analogComponent',
        has_properties: true,
        isReferenceVisible: true,
        isValueVisible: true,
        connectedHandles: [false, false],
        style: undefined,
        size: "small"
    },
    [ComponentType.VariableFerriteCoreInductor]: {
        name: 'Variable Ferrite Core Inductor',
        value: 100,
        category: Categories.Inductors,
        componentType: ComponentType.VariableFerriteCoreInductor,
        icon: <VariableFerriteCoreInductorIcon />,
        unit: UnitsType.Inductance,
        prefix: "mH",
        reference: "L",
        type: 'analogComponent',
        has_properties: true,
        isReferenceVisible: true,
        isValueVisible: true,
        connectedHandles: [false, false],
        style: undefined,
        size: "small"
    },
    [ComponentType.VariableIronCoreInductor]: {
        name: 'Variable Iron Core Inductor',
        value: 100,
        category: Categories.Inductors,
        componentType: ComponentType.VariableIronCoreInductor,
        icon: <VariableIronCoreInductorIcon />,
        unit: UnitsType.Inductance,
        prefix: "mH",
        reference: "L",
        type: 'analogComponent',
        has_properties: true,
        isReferenceVisible: true,
        isValueVisible: true,
        connectedHandles: [false, false],
        style: undefined,
        size: "small"
    },
    [ComponentType.SwitchSPST]: {
        name: 'SPST Switch',
        value: 0,
        state: {
            on: false,
            iconON: <SwitchSPSTCloseIcon />,
            iconOFF: <SwitchSPSTOpenIcon />,
        },
        category: Categories["Switches & Relays"],
        componentType: ComponentType.SwitchSPST,
        icon: <SwitchSPSTOpenIcon />,
        unit: UnitsType.Undefined,
        prefix: "",
        reference: "SW",
        type: 'mechanicalComponent',
        has_properties: true,
        isReferenceVisible: true,
        isValueVisible: true,
        connectedHandles: [false, false],
        style: undefined,
        size: "small"
    },
    [ComponentType.SwitchDPST]: {
        name: 'DPST Switch',
        value: 0,
        state: {
            on: false,
            iconON: <SwitchDPSTCloseIcon />,
            iconOFF: <SwitchDPSTOpenIcon />,
        },
        category: Categories["Switches & Relays"],
        componentType: ComponentType.SwitchDPST,
        icon: <SwitchDPSTOpenIcon />,
        unit: UnitsType.Undefined,
        prefix: "",
        reference: "SW",
        type: 'switchDPST',
        has_properties: true,
        isReferenceVisible: true,
        isValueVisible: true,
        connectedHandles: [false, false, false, false],
        style: undefined,
        size: "large"
    },
    [ComponentType.PusuhButtonOpen]: {
        name: 'Push Button Normally Open',
        value: 0,
        state: {
            on: false,
            iconON: <PushButtonCloseNOIcon />,
            iconOFF: <PushButtonOpenNOIcon />,
        },
        category: Categories["Switches & Relays"],
        componentType: ComponentType.PusuhButtonOpen,
        icon: <PushButtonOpenNOIcon />,
        unit: UnitsType.Undefined,
        prefix: "",
        reference: "SW",
        type: 'mechanicalComponent',
        has_properties: true,
        isReferenceVisible: true,
        isValueVisible: true,
        connectedHandles: [false, false],
        style: undefined,
        size: "small"
    },
    [ComponentType.PusuhButtonClose]: {
        name: 'Push Button Normally Close',
        state: {
            on: true,
            iconON: <PushButtonCloseNCIcon />,
            iconOFF: <PushButtonOpenNCIcon />,
        },
        value: 0,
        category: Categories["Switches & Relays"],
        componentType: ComponentType.PusuhButtonClose,
        icon: <PushButtonCloseNCIcon />,
        unit: UnitsType.Undefined,
        prefix: "",
        reference: "SW",
        type: 'mechanicalComponent',
        has_properties: true,
        isReferenceVisible: true,
        isValueVisible: true,
        connectedHandles: [false, false],
        style: undefined,
        size: "small"
    },
    [ComponentType.SwitchSPDT]: {
        name: 'Switch SPDT',
        state: {
            on: false,
            iconON: <SwitchSPDTCloseIcon />,
            iconOFF: <SwitchSPDTOpenIcon />,
        },
        value: 0,
        category: Categories["Switches & Relays"],
        componentType: ComponentType.SwitchSPDT,
        icon: <SwitchSPDTOpenIcon />,
        unit: UnitsType.Undefined,
        prefix: "",
        reference: "SW",
        type: 'switchSPDT',
        has_properties: true,
        isReferenceVisible: true,
        isValueVisible: true,
        connectedHandles: [false, false],
        style: undefined,
        size: "medium"
    },
    [ComponentType.SwitchDPDT]: {
        name: 'Switch DPDT',
        state: {
            on: false,
            iconON: <SwitchDPDTCloseIcon />,
            iconOFF: <SwitchDPDTOpenIcon />,
        },
        value: 0,
        category: Categories["Switches & Relays"],
        componentType: ComponentType.SwitchDPDT,
        icon: <SwitchDPDTOpenIcon />,
        unit: UnitsType.Undefined,
        prefix: "",
        reference: "SW",
        type: 'switchSPDT',
        has_properties: true,
        isReferenceVisible: true,
        isValueVisible: true,
        connectedHandles: [false, false],
        style: undefined,
        size: "small"
    },
};





export const typeGroupDiode = new Set<ComponentType>([
    ComponentType.Diode,
    ComponentType.Zener,
    ComponentType.Schottky,
    ComponentType.Tunnel,
    ComponentType.PhotoDiode,
    ComponentType.TVSDiode,
    ComponentType.Varactor,
]);


export const typeGroupResistor = new Set<ComponentType>([
    ComponentType.Resistor,
    ComponentType.Potentiometer,
]);

export const typeGroupCapacitor = new Set<ComponentType>([
    ComponentType.Capacitor,
    ComponentType.PolarisedCapacitor,
]);


export const typeGroupVariableCapacitor = new Set<ComponentType>([
    ComponentType.VariableCapacitor,
    ComponentType.TrimmerCapacitor,
]);

export const typeGroupTransistor = new Set<ComponentType>(
    [
        ComponentType.TransistorBJT_NPN,
        ComponentType.TransistorBJT_PNP,
        ComponentType.TransistorJFET_N,
        ComponentType.TransistorJFET_P,
        ComponentType.TransistorMOSFET_N_Enhanced,
        ComponentType.TransistorMOSFET_P_Enhanced,
        ComponentType.TransistorMOSFET_N_Depletion,
        ComponentType.TransistorMOSFET_P_Depletion,
        ComponentType.PhotoTransistorNPN,
        ComponentType.PhotoTransistorPNP,
        ComponentType.PhotoTransistorNPN3Pins,
        ComponentType.PhotoTransistorPNP3Pins,
    ]
);

export const typeGroupTransistorSmall = new Set<ComponentType>(
    [
        ComponentType.TransistorBJT_NPN,
        ComponentType.TransistorBJT_PNP,
        ComponentType.PhotoTransistorNPN,
        ComponentType.PhotoTransistorPNP,
        ComponentType.PhotoTransistorNPN3Pins,
        ComponentType.PhotoTransistorPNP3Pins,
    ]
);

export const typeGroupInductor = new Set<ComponentType>([
    ComponentType.Inductor,
    ComponentType.FerriteCoreInductor,
    ComponentType.IronCoreInductor,
    ComponentType.PresetFerriteCoreInductor,
    ComponentType.PresetIronCoreInductor,
    ComponentType.VariableFerriteCoreInductor,
    ComponentType.VariableIronCoreInductor,
]);


export const typeGroupSwitch = new Set<ComponentType>([
    ComponentType.SwitchSPST,
    ComponentType.SwitchDPST,
    ComponentType.PusuhButtonOpen,
    ComponentType.PusuhButtonClose,
    ComponentType.SwitchSPDT,
    ComponentType.SwitchDPDT,
]);



export type TypeGroupKey =
    | "ResistorGroup"
    | "CapacitorGroup"
    | "VariableCapacitorGroup"
    | "DiodeGroup"
    | "TransistorGroup"
    | "SwitchGroup"
    | "InductorGroup";

// Define un mapa que relacione los grupos con sus tipos correspondientes
export const typeGroups: Record<TypeGroupKey, { types: Set<ComponentType>, designator: string }> = {
    ResistorGroup: { types: typeGroupResistor, designator: 'R' },
    CapacitorGroup: { types: typeGroupCapacitor, designator: 'C' },
    VariableCapacitorGroup: { types: typeGroupVariableCapacitor, designator: 'VC' },
    DiodeGroup: {
        types: new Set([...typeGroupDiode].filter((type) => type !== ComponentType.Led)),
        designator: 'D',
    },
    TransistorGroup: { types: typeGroupTransistor, designator: 'Q' },
    InductorGroup: { types: typeGroupInductor, designator: 'L' },
    SwitchGroup: { types: typeGroupSwitch, designator: 'SW' },
};